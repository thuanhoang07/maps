<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Map Example Using Javascript</title>

    <!-- Load the Google Maps API -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBRr6PMgMCG4GrlhCbO_wp466zIhddRJlg&callback=initMap"
            async defer></script>

    <!-- Link to your JavaScript and CSS -->
    <script src="index.js"></script>
    <link rel="stylesheet" href="style.css">
</head>
<body>

<div id="map"></div> <!-- Map container -->

<p id="directions"></p> <!-- Directions or other information -->

<!-- Input toggle switch -->
<!-- <label class="switch">
    <input type="checkbox" id="name">
    <span class="slider round"></span>
</label> -->

<script src="https://www.unpkg.com/@eohjsc/era-widget@1.0.14/src/index.js"></script>
<script>
    const eraWidget = new EraWidget();
    let configLAT = null;
    let configLON = null;
    
    eraWidget.onConfiguration((configuration) => {
        console.log(configuration);
        configLAT = configuration.realtime_configs[0];
        configLON = configuration.realtime_configs[1];
        console.log("Configuration Loaded:", configuration);
    });

    eraWidget.onValues((values) => {
        
        console.log("Value:", values);
        if (configLAT && values[configLAT.id]) {
            LAT = values[configLAT.id].value;
            console.log("Value LAT:", LAT);
        }
        if (configLON && values[configLON.id]) {
            LON = values[configLON.id].value;
            console.log("Value LON:", LON);
        }
    });
    eraWidget.ready();
</script> 
</body>
</html>





















let map;
let marker;
let LAT = 20.028511;  
let LON = 105.804817; 

function initMap() {
    const options = {
        zoom: 14,
        center: { lat: LAT, lng: LON } 
    }

    map = new google.maps.Map(document.getElementById('map'), options);

    // Đặt marker ban đầu
    marker = new google.maps.Marker({
        position: { lat: LAT, lng: LON },
        map: map
    });

    // Cập nhật tọa độ của map và marker liên tục mỗi giây
    setInterval(updateMapCenter, 1000);
}

function updateMapCenter() {
    if (LAT && LON) {
        const newCenter = { lat: parseFloat(LAT), lng: parseFloat(LON) };

        // Cập nhật vị trí trung tâm của map
        map.setCenter(newCenter);

        // Cập nhật vị trí của marker
        marker.setPosition(newCenter);
    }
}

=================== bị đứt nét line tracking:====================================================
// function updateMapCenter() {
//     if (LAT && LON) {
//         const newCenter = { lat: parseFloat(LAT), lng: parseFloat(LON) };

//         // Update the map's center position
//         map.setCenter(newCenter);

//         // Update the marker's position
//         marker.setPosition(newCenter);

//         // Add new position to the route if GPSON is 1
//         if (GPSON === 1) {
//             const strokeColor = getStrokeColorBasedOnSpeed(SPEED);

//             // If there's no path or the color has changed, start a new segment
//             if (!currentPath || strokeColor !== currentColor) {
//                 if (currentPath) {
//                     currentPath.setPath(pathCoordinates); // Finalize the previous segment
//                     pathCoordinates = []; // Start a new segment
//                 }
//                 currentColor = strokeColor; // Update the current color
//                 initializePath(strokeColor); // Initialize a new path with the new color
//             }

//             // Add the new point to the current path
//             pathCoordinates.push(newCenter);
//             currentPath.setPath(pathCoordinates); // Update the path with the new coordinates
//         }
//     }
// }

=========================================================================================

liền nét:

let map;
let marker;
let currentPath;
let currentColor;
let pathCoordinates = [];
let LAT;  
let LON; 
let SPEED;
let GPSON = 0; // Assuming this variable is defined elsewhere

function initMap() {
    const options = {
        zoom: 14,
        center: { lat: LAT, lng: LON }
    };

    // Initialize the map
    map = new google.maps.Map(document.getElementById('map'), options);

    // Place initial marker
    marker = new google.maps.Marker({
        position: { lat: LAT, lng: LON },
        map: map
    });

    // Update map and marker coordinates every second
    setInterval(updateMapCenter, 1000);
}

function getStrokeColorBasedOnSpeed(speed) {
    if (speed <= 20) {
        return '#0000FF'; // Blue
    } else if (speed <= 40) {
        return '#008000'; // Green
    } else if (speed <= 60) {
        return '#FF0000'; // Red
    } else if (speed <= 80) {
        return '#800080'; // Purple
    } else {
        return '#000000'; // Black
    }
}

function initializePath(strokeColor) {
    currentPath = new google.maps.Polyline({
        path: [],
        geodesic: true,
        strokeColor: strokeColor,
        strokeOpacity: 1.0,
        strokeWeight: 4
    });
    currentPath.setMap(map);
}


function updateMapCenter() {
    if (LAT && LON) {
        const newCenter = { lat: parseFloat(LAT), lng: parseFloat(LON) };

        // Update the map's center position
        map.setCenter(newCenter);

        // Update the marker's position
        marker.setPosition(newCenter);

        // Add new position to the route if GPSON is 1
        if (GPSON === 1) {
            const strokeColor = getStrokeColorBasedOnSpeed(SPEED);

            // If there's no path or the color has changed, start a new segment
            if (!currentPath || strokeColor !== currentColor) {
                if (currentPath) {
                    // Add the last point to the new path segment to avoid gaps
                    pathCoordinates.push(newCenter);
                    currentPath.setPath(pathCoordinates); // Finalize the previous segment
                }
                currentColor = strokeColor; // Update the current color
                initializePath(strokeColor); // Initialize a new path with the new color
                pathCoordinates = [newCenter]; // Start the new segment with the last point
            } else {
                // Add the new point to the current path
                pathCoordinates.push(newCenter);
            }

            currentPath.setPath(pathCoordinates); // Update the path with the new coordinates
        }
    }
}





====================vẽ lúc nào cũng dc nhưng ko liền:=========================================================
let map;
let marker;
let currentPath;
let currentColor;
let pathCoordinates = [];
let LAT;  
let LON; 
let SPEED;
let GPSON = 0; // Assuming this variable is defined elsewhere

function initMap() {
    const options = {
        zoom: 14,
        center: { lat: LAT, lng: LON }
    };

    // Initialize the map
    map = new google.maps.Map(document.getElementById('map'), options);

    // Place initial marker
    marker = new google.maps.Marker({
        position: { lat: LAT, lng: LON },
        map: map
    });

    // Update map and marker coordinates every second
    setInterval(updateMapCenter, 1000);
}

function getStrokeColorBasedOnSpeed(speed) {
    if (speed <= 20) {
        return '#0000FF'; // Blue
    } else if (speed <= 40) {
        return '#008000'; // Green
    } else if (speed <= 60) {
        return '#FF0000'; // Red
    } else if (speed <= 80) {
        return '#800080'; // Purple
    } else {
        return '#000000'; // Black
    }
}

function initializePath(strokeColor) {
    currentPath = new google.maps.Polyline({
        path: [],
        geodesic: true,
        strokeColor: strokeColor,
        strokeOpacity: 1.0,
        strokeWeight: 4
    });
    currentPath.setMap(map);
}

function updateMapCenter() {
    if (LAT && LON) {
        const newCenter = { lat: parseFloat(LAT), lng: parseFloat(LON) };

        // Update the map's center position
        map.setCenter(newCenter);

        // Update the marker's position
        marker.setPosition(newCenter);

        // If GPSON is 1, add new position to the route
        if (GPSON === 1) {
            const strokeColor = getStrokeColorBasedOnSpeed(SPEED);

            // If the path color has changed or a new path is needed, start a new segment
            if (!currentPath || strokeColor !== currentColor || pathCoordinates.length === 0) {
                currentColor = strokeColor;
                initializePath(strokeColor);
                pathCoordinates = []; // Reset the path coordinates for a new segment
            }

            // Add the new point to the current path
            pathCoordinates.push(newCenter);
            currentPath.setPath(pathCoordinates); // Update the path with the new coordinates
        } else {
            // If GPSON is 0, finalize the current path segment
            if (currentPath) {
                currentPath.setPath(pathCoordinates);
            }
        }
    }
}














 #map {
     height: 400px;
     width: 100%;
 }









